export function initializeRaveSdk(config: RaveConfig): Promise<RaveResponse | RaveUSSDResponse>;
export function toggleDarkMode(dark: boolean): void;

interface RaveConfig {
    /**
     * This is the unique reference, unique to the particular transaction being carried out. It is generated by the merchant for every transaction
     */
    ref: string;
    /**
     * Merchant's public key. Get your merchant keys here for [staging](https://flutterwavedevelopers.readme.io/blog/how-to-get-your-staging-keys-from-the-rave-sandbox-environment) and [live](https://flutterwavedevelopers.readme.io/blog/how-to-get-your-live-keys-from-the-rave-dashboard)
     */
    publicKey: string;
    /**
     * Merchant's encryption key. Get your merchant keys here for [staging](https://flutterwavedevelopers.readme.io/blog/how-to-get-your-staging-keys-from-the-rave-sandbox-environment) and [live](https://flutterwavedevelopers.readme.io/blog/how-to-get-your-live-keys-from-the-rave-dashboard)
     */
    encryptionKey: string;
    /**
     * This is a custom description added by the merchant. For Bank Transfer payments, this becomes the account name of the account to be paid into. See more details [here](https://developer.flutterwave.com/v2.0/reference#pay-with-bank-transfer-nigeria).
     */
    narration?: string;
    /**
     * This is the specified currency to charge the card in
     */
    currency: string;
    /**
     * This is the email address of the customer
     */
    email: string;
    /**
     * This is the amount to be charged from card/account
     */
    amount: number;
    /**
     * This is the first name of the card holder or the customer
     */
    fName?: string;
    /**
     * This is the last name of the card holder or the customer
     */
    lName?: string;
    /**
     * This sets the customer's phone number
     */
    phone?: string;
    /**
     * This sets the customer's country
     */
    country?: string;
    /**
     * @platform android
     */
    barterCountry?: string;
    /**
     * Set to true if you want to accept Francophone mobile money payments, else set to false . For this option to work, you should set your country to NG and your currency to XOF for West African CFA franc like Ivory Coast OR XAF for Central African CFA franc like Cameroon . See more details in the [API documentation](https://developer.flutterwave.com/reference#mobile-money-francophone).
     * 
     * @platform android
     */
    francMobileMoneyPayments?: FrancMobileMoneyConfig | undefined;
    /**
     * Set to true if you want to accept payments via bank transfer from your customers, else set to false. This option is currently only available for Nigerian Naira.
     * 
     * Note: By default, the account numbers generated are dynamic.
     * 
     * To generate static (permanent) accounts instead, pass in true to `static` E.g 
     * ```json
     * { bankTransferPayments: { enabled: true, static: true } }
     * ```
     * 
     * To generate accounts that expire at a certain date, or after a certain number of payments, pass in integer values for `duration` and `frequency` E.g
     * ```json
     * { bankTransferPayments: { enabled: true, duration: 76833, frequency: 4 } }
     * ```
     * 
     * You can get more details in the [API documentation](https://developer.flutterwave.com/v2.0/reference#pay-with-bank-transfer-nigeria).
     */
    bankTransferPayments?: BankTransferConfig | BankTransferStaticConfig | BankTransferPeriodConfig | undefined;
    /**
     * Pass in a List of SubAccount,if you want to split transaction fee with other people. Subaccounts are your vendors' accounts that you want to settle per transaction. [Learn more about split payments and subaccounts](https://developer.flutterwave.com/docs/split-payment).
     */
    subAccounts?: (SubAccounts | SubAccountsCharge)[] | undefined;
    /**
     * Set to true if you want to accept payments via cards, else set to false
     */
    acceptCardPayments?: boolean;
    /**
     * Set to true if you want to accept payments via bank accounts, else set to false
     */
    acceptAccountPayments?: boolean;
    /**
     * Set to true if you want to accept Mpesa payments, else set to false . For this option to work, you should set `country` to KE and your currency to KES.
     * 
     * @platform android
     */
    acceptMpesaPayments?: boolean;
    /**
     * Set to true if you want to accept payments via USSD transfer from your customers, else set to false . This option is currently only available for the Nigerian Naira.
     */
    acceptUssdPayments?: boolean;
    /**
     * Set to true if you want to accept payments via Barter from your customers, else set to false.
     */
    acceptBarterPayments?: boolean;
    /**
     * @platform ios
     */
    acceptMobileMoney: boolean;
    /**
     * @platform ios
     */
    acceptVoucherPayment: boolean;
    /**
     * Set to true if you want to accept US ACH charges from your customers, else set to false . For this option to work, you should set your country to US and your currency to USD. You also have to set `acceptAccountPayments`: true.
     * 
     * @platform android
     */
    acceptAchPayments?: boolean;
    /**
     * Set to true if you want to accept Ghana mobile money payments, else set to false . For this option to work, you should set `country` to GH and your currency to GHS
     * 
     * @platform android
     */
    acceptGHMobileMoneyPayments?: boolean;
    /**
     * Set to true if you want to accept Uganda mobile money payments, else set to false . For this option to work, you should set `country` to UG and your currency to UGX
     * 
     * @platform android
     */
    acceptUgMobileMoneyPayments?: boolean;
    /**
     * Set to true if you want to accept Zambia mobile money payments, else set to false . For this option to work, you should set your country to NG and your currency to ZMW. MTN is the only available network at the moment, see more details in the [API documentation](https://developer.flutterwave.com/reference#zambia-mobile-money).
     * 
     * @platform android
     */
    acceptZmMobileMoneyPayments?: boolean;
    /**
     * Set to true if you want to accept Rwanda mobile money payments, else set to false . For this option to work, you should set your country to NG and your currency to RWF. See more details in the [API documentation](https://developer.flutterwave.com/reference#rwanda-mobile-money).
     * 
     * @platform android
     */
    acceptRwfMobileMoneyPayments?: boolean;
    /**
     * Set to true if you want to accept South African direct bank account payments, else set to false . For this option to work, you should set `country` to ZA and your currency to ZAR.
     * 
     * @platform android
     */
    acceptSaBankPayments?: boolean;
    /**
     * Set to true if you want to accept UK Bank Account payments, else set to false . For this option to work, you should set `country` to NG, set currency to GBP, set accountbank `String`, set accountname `String`, set accountnumber `String`, set is_uk_bank_charge2 `true`, set payment_type `account`. Please use your live credentials for this.
     * 
     * @platform android
     */
    acceptUkPayments?: boolean;
    /**
     * Set to true if you want your transactions to run in the staging environment otherwise set to false. Defaults to fals
     */
    isStagingEnv?: boolean;
    /**
     * Set to true if you want to give the user the option to save their cards for future transactions. This option helps them avoid retyping their card details for every transaction. Defaults to true.
     * 
     * @platform android
     */
    allowSaveCardFeature?: boolean;
    /**
     * Set to false to not display a dialog for confirming total amount(including charge fee) that Rave will charge. By default this is set to true.
     * 
     * @platform android
     */
    shouldDisplayFee?: boolean;
    /**
     * Set to false to not display a staging label when in staging environment. By default this is set to true.
     * 
     * @platform android
     */
    showStagingLabel?: boolean;
}

interface RaveResponse {

}

interface RaveUSSDResponse {
    data: {
        AccountId: number;
        IP: string;
        acctvalrespcode?: string;
        acctvalrespmsg?: string;
        amount: number;
        appfee: number;
        authModelUsed?: string;
        authurl?: string;
        chargeResponseCode: string;
        chargeResponseMessage: string;
        charge_type?: string;
        charged_amount: number;
        createdAt: string;
        currency: string;
        'customer.AccountId': number;
        'customer.createdAt': string;
        'customer.customertoken': string;
        'customer.deletedAt': string | null;
        'customer.email': string;
        'customer.fullName': string | null;
        'customer.id': number;
        'customer.phone': string | null;
        'customer.updatedAt': string;
        customerId: number;
        cycle: string;
        deletedAt: string | null;
        device_fingerprint: string;
        flwMeta: {
            [key: string]: any
        },
        flwRef: string;
        fraud_status: string;
        getpaidBatchId: string | null,
        id: number,
        is_live?: number,
        merchantbearsfee: number;
        merchantfee: number;
        meta: any;
        modalauditid?: string;
        narration: string;
        orderRef: string;
        paymentId: string;
        paymentPage: any | null;
        paymentPlan: any | null;
        paymentType: string;
        raveRef: any | null,
        redirectUrl: string | null;
        retry_attempt: any | null,
        settlement_token: any | null,
        status: string;
        txRef: string;
        updatedAt: string;
        vbvrespcode: string;
        vbvrespmessage: string;
    },
    message: string;
    status: string;
};

interface FrancMobileMoneyConfig {
    enabled: boolean;
    country?: string | undefined;
}

interface BankTransferConfig {
    enabled: boolean;
}

interface BankTransferStaticConfig extends BankTransferConfig {
    static: boolean | undefined;
}

interface BankTransferPeriodConfig extends BankTransferConfig {
    duration: number | undefined;
    frequency: number | undefined;
}

interface SubAccounts {
    id: string;
    txnRatio: string;
}

interface SubAccountsCharge extends SubAccounts {
    txnChargeType: string;
    txnCharge: string;
}